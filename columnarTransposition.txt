import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the message: ");
        String message = scanner.nextLine().replaceAll("\\s+", "").toUpperCase();

        System.out.print("Enter the key: ");
        String key = scanner.nextLine().toUpperCase();

        String cipherText = encrypt(message, key);
        System.out.println("Simple Columnar Transposition Cipher Text: " + cipherText);

        String decryptedMessage = decrypt(cipherText, key);
        System.out.println("Decrypted Message: " + decryptedMessage);

        scanner.close();
    }

    public static String encrypt(String message, String key) {
        int numColumns = key.length();
        int numRows = (int) Math.ceil((double) message.length() / numColumns);
        char[][] grid = new char[numRows][numColumns];
        int index = 0;

        // Fill the grid with the message or 'X' if the message is shorter
        for (int r = 0; r < numRows; r++) {
            for (int c = 0; c < numColumns; c++) {
                if (index < message.length()) {
                    grid[r][c] = message.charAt(index++);
                } else {
                    grid[r][c] = 'X';  // Padding with 'X' if the grid is not full
                }
            }
        }

        // Read columns in order of the key to generate the cipher text
        StringBuilder cipherText = new StringBuilder();
        for (int c = 0; c < numColumns; c++) {
            for (int r = 0; r < numRows; r++) {
                cipherText.append(grid[r][c]);
            }
        }

        return cipherText.toString();
    }

    public static String decrypt(String cipherText, String key) {
        int numColumns = key.length();
        int numRows = (int) Math.ceil((double) cipherText.length() / numColumns);

        // Create a grid to store the cipher text during decryption
        char[][] grid = new char[numRows][numColumns];
        int index = 0;

        // Arrange the cipher text into the grid column by column
        for (int c = 0; c < numColumns; c++) {
            for (int r = 0; r < numRows; r++) {
                if (index < cipherText.length()) {
                    grid[r][c] = cipherText.charAt(index++);
                } else {
                    grid[r][c] = 'X';  // Padding with 'X' if the grid is not full
                }
            }
        }

        // Reconstruct the message by reading the grid row by row
        StringBuilder decryptedMessage = new StringBuilder();
        for (int r = 0; r < numRows; r++) {
            for (int c = 0; c < numColumns; c++) {
                decryptedMessage.append(grid[r][c]);
            }
        }

        // Remove padding 'X' if present
        return decryptedMessage.toString().replaceAll("X+$", "");
    }
}
